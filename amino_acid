"""
this commands visualizes the amino acid substitution matrices.

dependencies:
•	os
•	sys
•	pandas
•	numpy
•	seaborn

input 
•	Folder – varies in purpose based on definition
•	File – varies in purpose based on definition 
•	Out – output directory

note matrices for each of the possible amino acid substitutions follow this profile:
,A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,STOP
A,
C,
D,
E,
F,
G,
H,
I,
K,
L,
M,
N,
P,
Q,
R,
S,
T,
V,
W,
Y,
STOP,


def heat:

this is used to make one csv into a heatmap; Folder sets path, File sets file for heatmap.
 

def heat_comp:

this is used to make a heatmap that compares two csvs; Folder is first file input, File is second.

it is assumed that the csv is in proportions, multiplying by 100 makes the scales more interpretable, one matrix is simply subtracted from the other, and the resultant matrix is used to make the heatmap.


 
def heat_mod:

this is used to create a prediction heatmap of what is expected based on the proportions of each type of DNA mutation and starting amino acid proportions in the reference.

Folder sets path to DNA mutation csv count matrices, File sets path to csv with 12 values that should be used as proportions for each DNA mutation in alphabetical order, AC, AG, AT, CA, CG, CT, GA, GC, GT, TA, TC, TG.

os.chdir(Folder) sets path to template csv that have amino acid substitution matrices.

mAC opens the AC.csv and uses numpy to ensure the values are float.
this is repeated for on each of the 12 DNA mutation csvs.

Values then uses the File csv in which each there are 12 proportions that add up to 1 (AC, AG, AT, CA, CG, CT, GA, GC, GT, TA, TC, TG).

MAC then corrects mAC based on how much bigger or smaller the AC proportion is than 1/12. This is repeated for each mutation. 

SUM then adds all corrected mutation specific matrices together and divides by 438 (the raw count of possible substitutions) to predict the proportion of each amino acid substitution.

this is then corrected row by row based on the proportion of the 21 amino acids in the reference (including the stop codon), correcting the value predicted by the sum of DNA mutation outcomes by normalizing it then renormalizing based on the proportion of the amino acid present in the reference. 
E.g. A = su.iloc takes the first row of the SUM matrix to represent the proportion of substitutions that involve a change from alanine.
Aa sums it to get the proportion of all mutations from alanine, then divides by 1/21 to get its relative weight in comparison to the rest of the matrix. 
Aa then updates this value based on the relative weight from the reference. 
A then uses this weight to update each value in the original row.
This is repeated for all 21 rows of the matrix.
MOD then puts these reweighted rows into a matrix, which is then put in a dataframe and exported to csv (to make sure it makes sense).

A heatmap is then created based on MOD (or SUM) that reflects a prediction of amino acid substitutions given the reference and proportions of DNA mutations.


def heat_X:

this does exactly what heat_mod does, except does not take into consideration amino acids present in the reference.

"""

AC = ([,A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,STOP],
A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
D,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
E,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
F,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
H,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0],
I,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0],
K,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,2,0,0,0,0],
L,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
M,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
N,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0],
P,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Q,0,0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0],
R,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
S,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0],
T,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0],
V,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
W,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Y,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0],
STOP,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0])

AG = ([,A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,STOP],
A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
D,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
E,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
F,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
H,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0],
I,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0],
K,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0],
L,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
M,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
N,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0],
P,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Q,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0],
R,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
S,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
T,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
V,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
W,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Y,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
STOP,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0])

AT = ([,A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,STOP],
A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0],
E,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0],
F,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
H,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0],
I,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
K,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,2],
L,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
M,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
N,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0],
P,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Q,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0],
R,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1],
S,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
T,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0],
V,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
W,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Y,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
STOP,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0])

CA = ([,A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,STOP],
A,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
D,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
F,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
H,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0],
I,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
L,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0],
M,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
N,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
P,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,4,0,0,0,0],
Q,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0],
R,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0],
S,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,2],
T,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0],
V,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
W,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Y,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
STOP,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

CG = ([,A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,STOP],
A,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
D,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
F,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
H,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
I,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
L,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0],
M,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
N,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
P,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0],
Q,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
R,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
S,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1],
T,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0],
V,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
W,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Y,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
STOP,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

CT = ([,A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,STOP],
A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0],
C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
F,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
H,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0],
I,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
L,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
M,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
N,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
P,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0],
Q,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
R,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2],
S,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0],
T,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0],
V,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
W,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Y,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
STOP,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

GA = ([,A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,STOP],
A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0],
C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0],
D,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0],
E,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0],
F,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
G,0,0,2,2,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0],
H,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
I,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
L,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
M,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
N,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
P,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Q,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
R,0,0,0,0,0,0,2,0,2,0,0,0,0,2,0,0,0,0,0,0,0],
S,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0],
T,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
V,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,0,0,0,0],
W,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
Y,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
STOP,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

GC = ([,A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,STOP],
A,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0],
C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0],
D,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
E,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0],
F,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
G,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0],
H,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
I,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
K,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
L,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
M,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
N,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
P,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Q,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
R,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,2,0,0,0,0],
S,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0],
T,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
V,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0],
W,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
Y,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
STOP,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0])

GT = ([,A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,STOP],
A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0],
C,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0],
E,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],
F,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
G,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,0,1],
H,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
I,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
K,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
L,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
M,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
N,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
P,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Q,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
R,0,0,0,0,0,0,0,1,0,4,1,0,0,0,0,1,0,0,0,0,0],
S,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0],
T,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
V,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0],
W,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
Y,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
STOP,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0])

TA = ([,A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,STOP],
A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2],
D,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
F,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,2,0],
G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
H,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
I,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0],
K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
L,0,0,0,0,0,0,2,1,0,0,1,0,0,2,0,0,0,0,0,0,2],
M,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
N,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
P,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Q,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
R,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
S,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,4,0,0,0,0],
T,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
V,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
W,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2],
Y,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1],
STOP,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,0,0])

TC = ([,A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,STOP],
A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
C,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0],
D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
F,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0],
G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0],
H,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
I,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0],
K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
L,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,2,0,0,0,0,0],
M,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
N,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
P,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Q,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
R,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
S,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0],
T,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
V,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
W,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
Y,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
STOP,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0])

TG = ([,A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,STOP],
A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
C,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
D,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
F,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0],
G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
H,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
I,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0],
K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
L,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,0,2,1,0,1],
M,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
N,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
P,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Q,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
R,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
S,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
T,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
V,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
W,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
Y,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
STOP,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

import os
import sys
import numpy as np
import seaborn as sb
import pandas as pd

Folder = sys.argv[1]
File = sys.argv[2]
Out = sys.argv[3]

#for one file
def heat():
    os.chdir(Folder)
    MOD = pd.read_csv(File)
    text = 'A', 'C', 'D', 'E', 'F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','Y','STOP'
    heat_map = sb.heatmap(MOD, vmin=0, vmax=0.05)
    heat_map.set_yticklabels(text)
    heat_map.set_xticklabels(text, rotation=90)
    return

#for set of mutation proportions
def heat_X():
    
    os.chdir(Folder)
    mAC = AC
    mAC = mAC.iloc[0:,1:]
    mAC = np.matrix(mAC, dtype=float)
    
    mAG = AG
    mAG = mAG.iloc[0:,1:]
    mAG = np.matrix(mAG, dtype=float)
    
    mAT = AT
    mAT = mAT.iloc[0:,1:]
    mAT = np.matrix(mAT, dtype=float)
    
    mCA = CA
    mCA = mCA.iloc[0:,1:]
    mCA = np.matrix(mCA, dtype=float)
    
    mCG = CG
    mCG = mCG.iloc[0:,1:]
    mCG = np.matrix(mCG, dtype=float)
    
    mCT = CT
    mCT = mCT.iloc[0:,1:]
    mCT = np.matrix(mCT, dtype=float)
    
    mGA = GA
    mGA = mGA.iloc[0:,1:]
    mGA = np.matrix(mGA, dtype=float)
    
    mGC = GC
    mGC = mGC.iloc[0:,1:]
    mGC = np.matrix(mGC, dtype=float)
    
    mGT = GT
    mGT = mGT.iloc[0:,1:]
    mGT = np.matrix(mGT, dtype=float)
    
    mTA = TA
    mTA = mTA.iloc[0:,1:]
    mTA = np.matrix(mTA, dtype=float)
    
    mTC = TC
    mTC = mTC.iloc[0:,1:]
    mTC = np.matrix(mTC, dtype=float)
    
    mTG = TG
    mTG = mTG.iloc[0:,1:]
    mTG = np.matrix(mTG, dtype=float)
    
    Values = pd.read_csv(File)
    Values = np.array(Values, dtype=float)
    
    nAC = Values.item(0)
    nAG = Values.item(1)
    nAT = Values.item(2)
    nCA = Values.item(3)
    nCG = Values.item(4)
    nCT = Values.item(5)
    nGA = Values.item(6)
    nGC = Values.item(7)
    nGT = Values.item(8)
    nTA = Values.item(9)
    nTC = Values.item(10)
    nTG = Values.item(11)
    
    MAC = mAC * (nAC/(1/12))
    MAG = mAG * (nAG/(1/12))
    MAT = mAT * (nAT/(1/12))
    MCA = mCA * (nCA/(1/12))
    MCG = mCG * (nCG/(1/12))
    MCT = mCT * (nCT/(1/12))
    MGA = mGA * (nGA/(1/12))
    MGC = mGC * (nGC/(1/12))
    MGT = mGT * (nGT/(1/12))
    MTA = mTA * (nTA/(1/12))
    MTC = mTC * (nTC/(1/12))
    MTG = mTG * (nTG/(1/12)) 
    
    SUM = (MAC + MAG + MAT + MCA + MCG + MCT + MGA + MGC + MGT + MTA + MTC + MTG)/438
    SUM = pd.DataFrame(SUM)
    
    text = 'A', 'C', 'D', 'E', 'F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','Y','STOP'
    heat_map = sb.heatmap(SUM, vmin=0, vmax=0.05)
    heat_map.set_yticklabels(text)
    heat_map.set_xticklabels(text, rotation=90)
    
    return

#for set of mutation proportions and WES
def heat_mod():
    
    os.chdir(Folder)
    mAC = AC
    mAC = mAC.iloc[0:,1:]
    mAC = np.matrix(mAC, dtype=float)
    
    mAG = AG
    mAG = mAG.iloc[0:,1:]
    mAG = np.matrix(mAG, dtype=float)
    
    mAT = AT
    mAT = mAT.iloc[0:,1:]
    mAT = np.matrix(mAT, dtype=float)
    
    mCA = CA
    mCA = mCA.iloc[0:,1:]
    mCA = np.matrix(mCA, dtype=float)
    
    mCG = CG
    mCG = mCG.iloc[0:,1:]
    mCG = np.matrix(mCG, dtype=float)
    
    mCT = CT
    mCT = mCT.iloc[0:,1:]
    mCT = np.matrix(mCT, dtype=float)
    
    mGA = GA
    mGA = mGA.iloc[0:,1:]
    mGA = np.matrix(mGA, dtype=float)
    
    mGC = GC
    mGC = mGC.iloc[0:,1:]
    mGC = np.matrix(mGC, dtype=float)
    
    mGT = GT
    mGT = mGT.iloc[0:,1:]
    mGT = np.matrix(mGT, dtype=float)
    
    mTA = TA
    mTA = mTA.iloc[0:,1:]
    mTA = np.matrix(mTA, dtype=float)
    
    mTC = TC
    mTC = mTC.iloc[0:,1:]
    mTC = np.matrix(mTC, dtype=float)
    
    mTG = TG
    mTG = mTG.iloc[0:,1:]
    mTG = np.matrix(mTG, dtype=float)
    
    Values = pd.read_csv(File)
    Values = np.array(Values, dtype=float)
    
    nAC = Values.item(0)
    nAG = Values.item(1)
    nAT = Values.item(2)
    nCA = Values.item(3)
    nCG = Values.item(4)
    nCT = Values.item(5)
    nGA = Values.item(6)
    nGC = Values.item(7)
    nGT = Values.item(8)
    nTA = Values.item(9)
    nTC = Values.item(10)
    nTG = Values.item(11)
    
    MAC = mAC * (nAC/(1/12))
    MAG = mAG * (nAG/(1/12))
    MAT = mAT * (nAT/(1/12))
    MCA = mCA * (nCA/(1/12))
    MCG = mCG * (nCG/(1/12))
    MCT = mCT * (nCT/(1/12))
    MGA = mGA * (nGA/(1/12))
    MGC = mGC * (nGC/(1/12))
    MGT = mGT * (nGT/(1/12))
    MTA = mTA * (nTA/(1/12))
    MTC = mTC * (nTC/(1/12))
    MTG = mTG * (nTG/(1/12)) 
    
    SUM = (MAC + MAG + MAT + MCA + MCG + MCT + MGA + MGC + MGT + MTA + MTC + MTG)/438
    su = pd.DataFrame(SUM)
    
    A = su.iloc[0,:]
    Aa = sum(A)/(1/21)
    Aa = 1.444267/(Aa)
    A = A*Aa
    C = su.iloc[1,:]
    Cc = sum(C)/(1/21)
    Cc = 0.459934/(Cc)
    C = C*Cc
    D = su.iloc[2,:]
    Dd = sum(D)/(1/21)
    Dd = 1.009417/(Dd)
    D = D*Dd
    E = su.iloc[3,:]
    Ee = sum(E)/(1/21)
    Ee = 1.503128/(Ee)
    E = E*Ee
    F = su.iloc[4,:]
    Ff = sum(F)/(1/21)
    Ff = 0.754421/(Ff)
    F = F*Ff
    G = su.iloc[5,:]
    Gg = sum(G)/(1/21)
    Gg = 1.352014/(Gg)
    G = G*Gg
    H = su.iloc[6,:]
    Hh = sum(H)/(1/21)
    Hh = 0.542943/(Hh)
    H = H*Hh
    I = su.iloc[7,:]
    Ii = sum(I)/(1/21)
    Ii = 0.915879/(Ii)
    I = I*Ii
    K = su.iloc[8,:]
    Kk = sum(K)/(1/21)
    Kk = 1.217245/(Kk)
    K = K*Kk
    L = su.iloc[9,:]
    Ll = sum(L)/(1/21)
    Ll = 2.061498/(Ll)
    L = L*Ll
    M = su.iloc[10,:]
    Mm = sum(M)/(1/21)
    Mm = 0.464837/(Mm)
    M = M*Mm
    N = su.iloc[11,:]
    Nn = sum(N)/(1/21)
    Nn = 0.758762/(Nn)
    N = N*Nn
    P = su.iloc[12,:]
    Pp = sum(P)/(1/21)
    Pp = 1.298454/(Pp)
    P = P*Pp
    Q = su.iloc[13,:]
    Qq = sum(Q)/(1/21)
    Qq = 0.999901/(Qq)
    Q = Q*Qq
    R = su.iloc[14,:]
    Rr = sum(R)/(1/21)
    Rr = 1.181556/(Rr)
    R = R*Rr
    S = su.iloc[15,:]
    Ss = sum(S)/(1/21)
    Ss = 1.741092/(Ss)
    S = S*Ss
    T = su.iloc[16,:]
    Tt = sum(T)/(1/21)
    Tt = 1.117519/(Tt)
    T = T*Tt
    V = su.iloc[17,:]
    Vv = sum(V)/(1/21)
    Vv = 1.25311/(Vv)
    V = V*Vv
    W = su.iloc[18,:]
    Ww = sum(W)/(1/21)
    Ww = 0.31791/(Ww)
    W = W*Ww
    Y = su.iloc[19,:]
    Yy = sum(Y)/(1/21)
    Yy = 0.554111/(Yy)
    Y = Y*Yy
    X = su.iloc[20,:]
    Xx = sum(X)/(1/21)
    Xx = 0.055119/(Xx)
    X = X*Xx
    
    MOD = A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,X
    MOD = np.matrix(MOD, dtype=float)
    MOD = pd.DataFrame(MOD)
    MOD.to_csv(Out,index=False, header=False)
    
    text = 'A', 'C', 'D', 'E', 'F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','Y','STOP'
    heat_map = sb.heatmap(MOD, vmin=0, vmax=0.05)
    heat_map.set_yticklabels(text)
    heat_map.set_xticklabels(text, rotation=90)
    
    return

def heat_comp():
    M = pd.read_csv(Folder)
    
    M = M.iloc[0:,:]
    M = np.matrix(M, dtype=float)
    M = M*100
    
    N = pd.read_csv(File)
    N = N.iloc[0:,:]
    N = np.matrix(N, dtype=float)
    N = N*100
    
    delt = M-N
    delt = pd.DataFrame(delt)
    delt.to_csv(Out, index=False, header=False)
    
    text = 'A', 'C', 'D', 'E', 'F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','Y','STOP'
    heat_map = sb.heatmap(delt, vmin=-5, vmax=2)
    heat_map.set_yticklabels(text)
    heat_map.set_xticklabels(text, rotation=90)
    
    return
